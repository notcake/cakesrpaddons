local LoansPanel = nilCGUI.RegisterView ("ActiveLoanView", function ()	local self = CGUI.CreateControl ("BasePanel")	self.SelectedItem = nil		self.ApplyButton = vgui.Create ("GButton", self)	self.ApplyButton:SetSize (100, 28)	self.ApplyButton:SetText ("Apply for a loan")	self.ApplyButton:AddEventListener ("Click", function (button)		local dialog = CGUI.CreateDialog ("LoanApplicationDialog")		dialog:ShowDialog ()	end)		self.CancelButton = vgui.Create ("GButton", self)	self.CancelButton:SetSize (100, 28)	self.CancelButton:SetText ("Cancel Application")	self.CancelButton:AddEventListener ("Click", function (button)		if not self.SelectedItem or			not self.SelectedItem:IsValid () then			return		end		local loan = self.SelectedItem:GetLoan ()		RunConsoleCommand ("_loan_cancel", loan:GetLoanID ())	end)		self.Loans = vgui.Create ("DPanelList", self)	self.Loans:EnableVerticalScrollbar (true)	self.LoansByID = {}		self:AddLayouter (function (self)		self.ApplyButton:SetPos (4, 4)		self.CancelButton:SetPos (self:GetWide () - 4 - self.CancelButton:GetWide (), 4)		self.Loans:SetPos (4, self.ApplyButton:GetTall () + 8)		self.Loans:SetSize (self:GetWide () - 8, self:GetTall () - 12 - self.ApplyButton:GetTall ())		self:UpdateCancel ()	end)		function self:AddLoan (loan_data)		local loan = CLoans.Loan ()		loan:ImportDatastream (loan_data)		local item = nil		if self.LoansByID [loan_data.ID] then			item = self.LoansByID [loan_data.ID]		else			item = CGUI.CreateControl ("ActiveLoanItem", loan)			item:AddEventListener ("Select", function (item)				self:Select (item)			end)			self.Loans:AddItem (item)			self.LoansByID [loan:GetLoanID ()] = item						item:AddEventListener ("Click", function (item)				if item:GetLoan ():IsAwaitingPlayerAcceptance () then					CGUI.CreateDialog ("LoanAcceptanceDialog", item:GetLoan ()):ShowDialog ()				end			end)		end		item:SetLoan (loan)	end		function self:RemoveLoan (id)		if not self.LoansByID [id] then			return		end		self.Loans:RemoveItem (self.LoansByID [id])		if self.SelectedItem == self.LoansByID [id] then			self:Select (nil)		end		self.LoansByID [id] = nil	end		function self:Select (item)		if self.SelectedItem and			self.SelectedItem:IsValid () then			self.SelectedItem:Deselect ()		end		self.SelectedItem = item		self:UpdateCancel ()	end		function self:UpdateCancel ()		if not self.SelectedItem or			not self.SelectedItem:IsValid () then			self.CancelButton:SetDisabled (true)			return		end		local loan = self.SelectedItem:GetLoan ()		if not loan:IsAwaitingBankerApproval () then			self.CancelButton:SetDisabled (true)			return		end		self.CancelButton:SetDisabled (false)	end		LoansPanel = self	return selfend)datastream.Hook ("loan_info", function (_, _, _, tbl)	if not LoansPanel or not LoansPanel:IsValid () then		return	end	for _, loan_data in ipairs (tbl) do		LoansPanel:AddLoan (loan_data)	endend)usermessage.Hook ("loan_removed", function (umsg)	if not LoansPanel or not LoansPanel:IsValid () then		return	end	local id = umsg:ReadLong ()	LoansPanel:RemoveLoan (id)end)