local LoansPanel = nilCGUI.RegisterView ("LoanApprovalView", function ()	local self = CGUI.CreateControl ("BasePanel")	self.SelectedItem = nil		self.Loans = vgui.Create ("DPanelList", self)	self.Loans:EnableVerticalScrollbar (true)	self.LoansByID = {}		self:AddLayouter (function (self)		self.Loans:SetPos (4, 4)		self.Loans:SetSize (self:GetWide () - 8, self:GetTall () - 8)	end)		function self:AddLoan (loan_data)		local loan = CLoans.Loan ()		loan:ImportDatastream (loan_data)		local item = nil		if self.LoansByID [loan_data.ID] then			item = self.LoansByID [loan_data.ID]		else			item = CGUI.CreateControl ("AppliedLoanItem")			item:AddEventListener ("Select", function (item)				self:Select (item)			end)			item:AddEventListener ("Click", function (item)				CGUI.CreateDialog ("LoanApprovalDialog", item:GetLoan ()):ShowDialog ()			end)			self.Loans:AddItem (item)			self.LoansByID [loan:GetLoanID ()] = item		end		item:SetLoan (loan)	end		function self:RemoveLoan (id)		if not self.LoansByID [id] then			return		end		self.Loans:RemoveItem (self.LoansByID [id])		self.LoansByID [id] = nil	end		function self:Select (item)		if self.SelectedItem and			self.SelectedItem:IsValid () then			self.SelectedItem:Deselect ()		end		self.SelectedItem = item	end		LoansPanel = self		return selfend)datastream.Hook ("loan_application", function (_, _, _, tbl)	if not LoansPanel or not LoansPanel:IsValid () then		return	end	for _, loan_data in ipairs (tbl) do		LoansPanel:AddLoan (loan_data)	endend)usermessage.Hook ("loan_application_removed", function (umsg)	if not LoansPanel or not LoansPanel:IsValid () then		return	end	local id = umsg:ReadLong ()	LoansPanel:RemoveLoan (id)end)