local PANEL = {}--[[	Events		CheckStateChanged (bool checked)]]function PANEL:Init ()	self.Disabled = false		self.Checked = false		self:SetContentAlignment (4)	self:SetText ("")	CUtil.EventProvider (self)endfunction PANEL:GetChecked ()	return self.CheckedendPANEL.IsChecked = PANEL.GetCheckedfunction PANEL:IsDisabled ()	return self.Disabledendfunction PANEL:Paint ()	local h = 14	local w = 14		-- Outline and background	if self.Disabled then		draw.RoundedBox (4, 0, 0, w, h, Color (64, 64, 64, 255))		draw.RoundedBox (4, 1, 1, w - 2, h - 2, Color (172, 172, 172, 255))		self:SetTextColor (128, 128, 128, 255)	else		if self.Hovered then			draw.RoundedBox (4, 0, 0, w, h, Color (128, 128, 128, 255))			self:SetTextColor (255, 255, 255, 255)		else			draw.RoundedBox (4, 0, 0, w, h, Color (30, 30, 30, 255))			self:SetTextColor (200, 200, 200, 255)		end		draw.RoundedBox (4, 1, 1, w - 2, h - 2, Color (255, 255, 255, 255))	end		if self.Checked then		surface.SetFont ("marlett")		surface.SetTextPos (0, 0)		if self.Disabled then			surface.SetTextColor (64, 64, 64, 255)		else			surface.SetTextColor (0, 0, 0, 255)		end		surface.DrawText ("a")	end	return falseendfunction PANEL:PerformLayout ()	self:SetTextInset (self:GetTall () + 4)endfunction PANEL:SetChecked (checked)	if self.Checked == checked then		return	end	self.Checked = checked	self:DispatchEvent ("CheckStateChanged", checked)endfunction PANEL:SetDisabled (disabled)	if disabled == nil then		disabled = true	end	self.Disabled = disabledendPANEL.SetTextColor = _R.Panel.SetFGColorPANEL.SetValue = PANEL.SetChecked-- Eventsfunction PANEL:DoClick ()	if self.Disabled then		return	end	self:SetChecked (not self.Checked)endvgui.Register ("GCheckbox", PANEL, "DButton")